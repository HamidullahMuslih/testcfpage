{"mappings":"I,E,E,E,E,E,E,C,E,E,C,E,O,E,C,E,Y,iB,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,C,c,uD,E,E,SCKA,KAAK,SAAS,CAAG,AAAA,IACZ,GAAI,CAAE,EAAQ,EAAQ,EAAM,EAAY,CAAG,EAAM,IAAI,CACtD,AAAA,CAAA,EAAA,EAAA,OAAG,AAAH,EAAK,EAAQ,GAAQ,KAAK,CAAC,AAAA,IACvB,QAAQ,GAAG,CAAC,GACZ,IAAM,EAAQ,AAAI,MAAM,EAAI,OAAO,CAOnC,OANA,EAAM,cAAc,CAAG,yBAEvB,WAAW,KACP,MAAM,CACV,GAEM,CACV,GAAG,IAAI,CAAC,KAGJ,AAAA,CAAA,EAAA,EAAA,uBAAsB,AAAtB,EAAwB,EAC5B,EACJ,EACA,KAAK,oBAAoB,CAAG,SAAS,CAAC,EAElC,MADA,QAAQ,KAAK,CAAC,8BAA+B,EAAE,MAAM,EAC/C,EAAE,MAAM,AAClB,EACA,KAAK,OAAO,CAAG,SAAS,CAAC,EAErB,MADA,QAAQ,KAAK,CAAC,gBAAiB,EAAE,OAAO,EAClC,CACV,EAEA,KAAK,OAAO,CAAG,SAAS,CAAC,EAErB,MADA,QAAQ,KAAK,CAAC,gBAAiB,EAAE,OAAO,EAClC,CACV","sources":["<anon>","packages/webz-wallet/snippets/wasm_thread-8ee53d0673203880/src/wasm32/js/web_worker_module.bundler.js"],"sourcesContent":["(() => {\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nimportScripts(\"./workerHelpers.worker.f1c0f3de.js\");\nvar $f8a9335817cfea70$exports = {};\n// synchronously, using the browser, import wasm_bindgen shim JS scripts\n\nvar $6KnfH = parcelRequire(\"6KnfH\");\n// Wait for the main thread to send us the shared module/memory and work context.\n// Once we've got it, initialize it all with the `wasm_bindgen` global we imported via\n// `importScripts`.\nself.onmessage = (event)=>{\n    let [module, memory, work, thread_key] = event.data;\n    (0, $6KnfH.default)(module, memory).catch((err)=>{\n        console.log(err);\n        const error = new Error(err.message);\n        error.customProperty = \"This error right here!\";\n        // Propagate to main `onerror`:\n        setTimeout(()=>{\n            throw error;\n        });\n        // Rethrow to keep promise rejected and prevent execution of further commands:\n        throw error;\n    }).then(()=>{\n        // Enter rust code by calling entry point defined in `lib.rs`.\n        // This executes closure defined by work context.\n        (0, $6KnfH.wasm_thread_entry_point)(work);\n    });\n};\nself.onunhandledrejection = function(e) {\n    console.error('Worker unhandled rejection:', e.reason);\n    throw e.reason;\n};\nself.onerror = function(e) {\n    console.error('Worker error:', e.message);\n    throw e;\n};\nself.onended = function(e) {\n    console.error('Worker ended:', e.message);\n    throw e;\n};\n\n})();\n//# sourceMappingURL=web_worker_module.bundler.84c4d762.js.map\n","// synchronously, using the browser, import wasm_bindgen shim JS scripts\nimport init, { wasm_thread_entry_point } from \"../../../../../\";\n// Wait for the main thread to send us the shared module/memory and work context.\n// Once we've got it, initialize it all with the `wasm_bindgen` global we imported via\n// `importScripts`.\nself.onmessage = event => {\n     let [ module, memory, work, thread_key ] = event.data;\n    init(module, memory).catch(err => {\n        console.log(err);\n        const error = new Error(err.message);\n        error.customProperty = \"This error right here!\";\n        // Propagate to main `onerror`:\n        setTimeout(() => {\n            throw error;\n        });\n        // Rethrow to keep promise rejected and prevent execution of further commands:\n        throw error;\n    }).then(() => {\n        // Enter rust code by calling entry point defined in `lib.rs`.\n        // This executes closure defined by work context.\n        wasm_thread_entry_point(work);\n    });\n};\nself.onunhandledrejection = function(e) {\n    console.error('Worker unhandled rejection:', e.reason);\n    throw e.reason;\n};\nself.onerror = function(e) {\n    console.error('Worker error:', e.message);\n    throw e;\n};\n\nself.onended = function(e) {\n    console.error('Worker ended:', e.message);\n    throw e;\n}"],"names":["$parcel$global","$parcel$modules","$parcel$inits","parcelRequire","$6KnfH","globalThis","id","exports","init","module","call","err","Error","code","register","importScripts","self","onmessage","event","memory","work","thread_key","data","default","catch","console","log","error","message","customProperty","setTimeout","then","wasm_thread_entry_point","onunhandledrejection","e","reason","onerror","onended"],"version":3,"file":"web_worker_module.bundler.84c4d762.js.map"}